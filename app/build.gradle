apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'com.neenbedankt.android-apt'

ext {
  versionMajor = 1
  versionMinor = 0
  versionPatch = 0
}

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.0"
  defaultConfig {
    applicationId "com.mgcleanarchitecture"
    minSdkVersion 16
    targetSdkVersion 25
    versionCode getAppVersionCode()
    versionName getAppVersionName()
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    def BOOLEAN = "boolean"
    def STRING = "String"
    def TRUE = "true"
    def FALSE = "false"
    def BASE_URL = "BASE_URL"

    debug {
      applicationIdSuffix ".development"
      versionNameSuffix " - dev" + " - " + getDate()
      buildConfigField(STRING, BASE_URL, '"http://jsonplaceholder.typicode.com"')
    }

    preprod.initWith(buildTypes.debug)
    preprod {
      applicationIdSuffix ".preprod"
      versionNameSuffix " - pre" + " - " + getDate()
      buildConfigField(STRING, BASE_URL, '"http://jsonplaceholder.typicode.com/preprod"')
    }

    release {
      minifyEnabled false
      versionNameSuffix " - " + getDate()
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField(STRING, BASE_URL, '"http://jsonplaceholder.typicode.com/release"')
    }
  }
}

dependencies {

  final VC_DAGGER = '2.7'
  final VC_BUTTERKNIFE = '8.4.0'
  final VC_RETROFIT = '2.1.0'
  final VC_RXJAVA = '1.2.1'
  final VC_RXANDROID = '1.2.1'
  final VC_OTTO = '1.3.8'
  final VC_PICASSO = '2.5.2'
  final VC_SUPPORT = '25.0.0'
  final VC_REBOUND = '0.3.8'
  final VC_TIMBER = '4.3.1'
  final VC_LEAKCANARY = '1.5'

  compile fileTree(dir: 'libs', include: ['*.jar'])
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  //support lib
  compile "com.android.support:appcompat-v7:$VC_SUPPORT"
  compile "com.android.support:palette-v7:$VC_SUPPORT"

  //dependency injection libraries
  compile "com.google.dagger:dagger:$VC_DAGGER"
  apt "com.google.dagger:dagger-compiler:$VC_DAGGER"
  compile "com.jakewharton:butterknife:$VC_BUTTERKNIFE"
  apt "com.jakewharton:butterknife-compiler:$VC_BUTTERKNIFE"

  //http client
  compile "com.squareup.retrofit2:retrofit:$VC_RETROFIT"
  compile "com.squareup.retrofit2:converter-gson:$VC_RETROFIT" // to use gson within retrofit2
  compile "com.squareup.retrofit2:adapter-rxjava:$VC_RETROFIT" // to use rx with retrofit2

  //rx
  compile "io.reactivex:rxandroid:$VC_RXANDROID"
  compile "io.reactivex:rxjava:$VC_RXJAVA"

  //event-bus
  compile "com.squareup:otto:$VC_OTTO"

  //image downloading-caching
  compile "com.squareup.picasso:picasso:$VC_PICASSO"

  //animation helpers
  compile "com.facebook.rebound:rebound:$VC_REBOUND"

  //logging
  compile "com.jakewharton.timber:timber:$VC_TIMBER"

  //leakcanary
  debugCompile "com.squareup.leakcanary:leakcanary-android:$VC_LEAKCANARY"
  preprodCompile "com.squareup.leakcanary:leakcanary-android:$VC_LEAKCANARY"
  releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$VC_LEAKCANARY"
  testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$VC_LEAKCANARY"

  testCompile 'junit:junit:4.12'
}

def getAppVersionCode() {
  return (versionMajor * 100) + (versionMinor * 10) + (versionPatch)
}

def getAppVersionName() {
  return "${versionMajor}.${versionMinor}.${versionPatch}";
}

def getDate() {
  return new Date().format('dd.MM.yyyy HH:mm')
}